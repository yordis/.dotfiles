version: "3"
name: ubi

volumes:
  postgresql-data:
    driver: local
  minio-data:
    driver: local
  nats-data:
    driver: local
  redis-data:
    driver: local
  eventstore-data:
    driver: local
  cockroach-data:
    driver: local
  opensearch-data:
    driver: local
  rabbitmq-data:
    driver: local
  browserless-data:
    driver: local

services:
  rabbitmq:
    profiles:
      - rabbitmq
    container_name: rabbitmq
    image: rabbitmq:management
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      timeout: 20s
      retries: 10
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  schema-registry:
    container_name: schema-registry
    profiles:
      - kafka
    image: confluentinc/cp-schema-registry:latest
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092

  redpanda-console:
    container_name: redpanda-console
    profiles:
      - kafka
    image: redpandadata/console:latest
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    labels:
      - dev.orbstack.https-port=8081
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://schema-registry:8081"]

  zookeeper:
    container_name: zookeeper
    profiles:
      - kafka
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: yes

  kafka:
    container_name: kafka
    profiles:
      - kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true

  opensearch-dashboards:
    container_name: opensearch-dashboards
    profiles:
      - opensearch
    image: opensearchproject/opensearch-dashboards:latest
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'

  opensearch:
    container_name: opensearch
    profiles:
      - opensearch
      - temporal
    image: opensearchproject/opensearch:latest
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - OPENSEARCH_JAVA_OPTS=-Xms256m -Xmx256m
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
    volumes:
      - opensearch-data:/usr/share/opensearch/data

  cockroach:
    container_name: cockroach
    restart: "always"
    image: "cockroachdb/cockroach:latest"
    command: "start-single-node --insecure"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: "10s"
      timeout: "30s"
      retries: 5
    volumes:
      - cockroach-data:/cockroach/cockroach-data

  zitadel:
    container_name: zitadel
    restart: "always"
    image: "ghcr.io/zitadel/zitadel:latest"
    command: 'start-from-init --config /zitadel/defaults.yaml --masterkey "JuYLmMDXBljOuUghsNgnoB3AaEEFGOLY" --tlsMode disabled'
    environment:
      ZITADEL_DATABASE_COCKROACH_HOST: cockroach
      ZITADEL_EXTERNALSECURE: false
    depends_on:
      cockroach:
        condition: "service_healthy"
    ports:
      - "8780:8080"
    volumes:
      - ./services/zitadel:/zitadel

  browserless:
    container_name: browserless
    profiles:
      - browserless
    image: browserless/chrome:latest
    ports:
      - "3005:3000"
    volumes:
      - browserless-data:/data
    environment:
      WORKSPACE_DIR: /data/workspace
      DEBUG: browserless:*
      MAX_CONCURRENT_SESSIONS: 10
      CONNECTION_TIMEOUT: 60000
      MAX_QUEUE_LENGTH: 20
      PREBOOT_CHROME: true
      DEMO_MODE: false
      HOST: 0.0.0.0
      ENABLE_DEBUGGER: false
      PORT: 3000
      WORKSPACE_DELETE_EXPIRED: true

  nats:
    container_name: nats
    image: nats:latest
    ports:
      - "8222:8222"
      - "4222:4222"
      - "6222:6222"
      - "8874:8874"
    command: >-
      --http_port 8222
      --port 4222
      --jetstream
      --store_dir /data
      --config /nats-server.conf
    volumes:
      - nats-data:/data
      - ./services/nats/nats-server.conf:/nats-server.conf

  minio:
    container_name: minio
    image: minio/minio:edge
    command:
      - server
      - /data
    restart: unless-stopped
    ports:
      - "9002:9000"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ACCESS_KEY: AKIAIOSFODNN7EXAMPLE
      MINIO_SECRET_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      - "1026:1025"
      - "8026:8025"

  eventstore:
    container_name: eventstore
    image: eventstore/eventstore:latest
    restart: unless-stopped
    ports:
      - "2113:2113"
      - "1113:1113"
    volumes:
      - eventstore-data:/var/lib/eventstore
    environment:
      EVENTSTORE_CLUSTER_SIZE: 1
      EVENTSTORE_RUN_PROJECTIONS: All
      EVENTSTORE_START_STANDARD_PROJECTIONS: true
      EVENTSTORE_EXT_TCP_PORT: 1113
      EVENTSTORE_HTTP_PORT: 2113
      EVENTSTORE_INSECURE: true
      EVENTSTORE_ENABLE_EXTERNAL_TCP: true
      EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP: true

  postgresql:
    container_name: postgresql
    image: postgres:latest
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  redis:
    container_name: redis
    image: redis/redis-stack:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  temporal:
    container_name: temporal
    profiles:
      - temporal
    image: temporalio/auto-setup:latest
    labels:
      kompose.volume.type: configMap
    ports:
      - "7233:7233"
    depends_on:
      - postgresql
      - opensearch
    volumes:
      - ./services/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    environment:
      DB: postgresql
      DB_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PWD: postgres
      POSTGRES_SEEDS: postgresql
      DYNAMIC_CONFIG_FILE_PATH: /etc/temporal/config/dynamicconfig/development-sql.yaml
      ENABLE_ES: true
      ES_SEEDS: opensearch
      ES_VERSION: v7

  temporal-admin-tools:
    container_name: temporal-admin-tools
    profiles:
      - temporal
    image: temporalio/admin-tools:latest
    stdin_open: true
    tty: true
    depends_on:
      - temporal
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CLI_ADDRESS: temporal:7233

  temporal-ui:
    container_name: temporal-ui
    profiles:
      - temporal
    image: temporalio/ui:latest
    ports:
      - "8080:8080"
    depends_on:
      - temporal
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://temporal-ui.ubi.orb.local
      TEMPORAL_CSRF_COOKIE_INSECURE: true

  spicedb:
    container_name: spicedb
    image: authzed/spicedb:latest
    command: serve
    restart: unless-stopped
    ports:
      - "8880:8080"
      - "9890:9090"
      - "50051:50051"
    depends_on:
      - spicedb-migrate
      - postgresql
    environment:
      SPICEDB_GRPC_PRESHARED_KEY: foobar
      SPICEDB_DATASTORE_ENGINE: postgres
      SPICEDB_DATASTORE_CONN_URI: postgres://postgres:postgres@postgresql:5432/spicedb?sslmode=disable

  spicedb-migrate:
    container_name: spicedb-migrate
    image: authzed/spicedb:latest
    command: migrate head
    restart: on-failure
    depends_on:
      - postgresql
    environment:
      SPICEDB_DATASTORE_ENGINE: postgres
      SPICEDB_DATASTORE_CONN_URI: postgres://postgres:postgres@postgresql:5432/spicedb

  mongodb:
    container_name: mongodb
    profiles:
      - mongodb
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27017:27017"
