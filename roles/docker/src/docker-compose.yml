version: "3"

services:
  appsmith:
    container_name: appsmith
    image: index.docker.io/appsmith/appsmith-ce
    ports:
      - "5680:80"
      - "56443:443"
    volumes:
      - ./volumes/appsmith/stacks:/appsmith-stacks
    restart: unless-stopped

  browserless:
    container_name: browserless
    image: browserless/chrome:latest
    restart: always
    ports:
      - "3005:3000"
    volumes:
      - ./volumes/browserless/data:/data
    environment:
      WORKSPACE_DIR: /data/workspace
      DEBUG: browserless:*
      MAX_CONCURRENT_SESSIONS: 10
      CONNECTION_TIMEOUT: 60000
      MAX_QUEUE_LENGTH: 20
      PREBOOT_CHROME: true
      DEMO_MODE: false
      HOST: 0.0.0.0
      ENABLE_DEBUGGER: false
      PORT: 3000
      WORKSPACE_DELETE_EXPIRED: true

  inngest:
    container_name: inngest
    image: "inngest/inngest:latest"
    command:
      - inngest
      - dev
    ports:
      - "8288:8288"

  nats:
    container_name: nats
    image: nats:latest
    ports:
      - "8222:8222"
      - "4222:4222"
      - "6222:6222"
    command: >-
      --http_port 8222
      --port 4222
      --jetstream
      --store_dir /data
    volumes:
      - ./volumes/nats/data:/data

  docker-registry:
    container_name: docker-registry
    image: registry:latest
    restart: unless-stopped
    ports:
      - "5002:5000"

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    command: start-dev
    restart: unless-stopped
    ports:
      - "9000:8080"
    depends_on:
      - postgresql
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      DB_VENDOR: POSTGRES
      DB_ADDR: postgresql
      DB_DATABASE: keycloak
      DB_USER: postgres
      DB_PASSWORD: postgres

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "9001:3000"
    volumes:
      - ./services/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./volumes/grafana/:/var/lib/grafana
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: true

  # rancher:
  #   image: rancher/rancher:latest
  #   restart: unless-stopped
  #   ports:
  #     - 80:80
  #     - 443:443

  minio-console:
    container_name: minio-console
    image: minio/console:latest
    command:
      - server
    ports:
      - "9093:9090"
    environment:
      CONSOLE_PBKDF_PASSPHRASE: SECRET
      CONSOLE_PBKDF_SALT: SECRET
      CONSOLE_MINIO_SERVER: http://minio:9002

  minio:
    container_name: minio
    image: minio/minio:edge
    command:
      - server
      - /data
    restart: unless-stopped
    ports:
      - "9002:9000"
    volumes:
      - ./volumes/minio/storage:/data
    environment:
      MINIO_ACCESS_KEY: AKIAIOSFODNN7EXAMPLE
      MINIO_SECRET_KEY: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"

  verdaccio:
    container_name: verdaccio
    image: verdaccio/verdaccio:latest
    restart: unless-stopped
    ports:
      - "4873:4873"
    volumes:
      - ./volumes/verdaccio/storage:/verdaccio/storage
      - ./volumes/verdaccio/plugins:/verdaccio/plugins
    environment:
      VERDACCIO_PORT: 4873

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true

  opa:
    container_name: opa
    image: openpolicyagent/opa:latest
    restart: unless-stopped
    ports:
      - "8181:8181"
    command:
      - run
      - --server
      - --log-level=debug

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      - "1026:1025"
      - "8026:8025"

  eventstore:
    container_name: eventstore
    image: eventstore/eventstore:latest
    restart: unless-stopped
    ports:
      - "2113:2113"
      - "1113:1113"
    volumes:
      - ./volumes/eventstore/data:/var/lib/eventstore
      - ./volumes/eventstore/log:/var/log/eventstore
    environment:
      EVENTSTORE_CLUSTER_SIZE: 1
      EVENTSTORE_RUN_PROJECTIONS: All
      EVENTSTORE_START_STANDARD_PROJECTIONS: true
      EVENTSTORE_EXT_TCP_PORT: 1113
      EVENTSTORE_HTTP_PORT: 2113
      EVENTSTORE_INSECURE: true
      EVENTSTORE_ENABLE_EXTERNAL_TCP: true
      EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP: true

  postgis:
    container_name: postgis
    image: mdillon/postgis:latest
    restart: unless-stopped
    ports:
      - "5433:5432"
    volumes:
      - ./volumes/postgis:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  postgresql:
    container_name: postgresql
    image: postgres:latest
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/postgresql:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  dynamodb-local:
    container_name: dynamodb-local
    image: amazon/dynamodb-local:latest
    restart: unless-stopped
    ports:
      - "8000:8000"

  redis:
    container_name: redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"

  memcached:
    container_name: memcached
    image: memcached:latest
    restart: unless-stopped
    ports:
      - "11211:11211"

  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27017:27017"

  opensearch:
    container_name: opensearch
    image: opensearchproject/opensearch:latest
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9600:9600"
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
    volumes:
      - ./volumes/opensearch:/usr/share/opensearch/data

  opensearch-dashboards:
    container_name: opensearch-dashboards
    image: opensearchproject/opensearch-dashboards:latest
    ports:
      - "5601:5601"
    expose:
      - "5601"
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]'

  supertokens:
    container_name: supertokens
    image: registry.supertokens.io/supertokens/supertokens-postgresql:latest
    ports:
      - "3567:3567"
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRESQL_CONNECTION_URI: postgresql://postgres:postgres@postgresql:5432/supertokens

  temporal:
    container_name: temporal
    image: temporalio/auto-setup:1.21.4
    labels:
      kompose.volume.type: configMap
    ports:
      - "7233:7233"
    depends_on:
      - postgresql
    volumes:
      - ./services/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    environment:
      DB: postgresql
      DB_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PWD: postgres
      POSTGRES_SEEDS: postgresql
      DYNAMIC_CONFIG_FILE_PATH: /etc/temporal/config/dynamicconfig/development-sql.yaml
      TEMPORAL_ADDRESS: temporal:7233

  temporal-admin-tools:
    container_name: temporal-admin-tools
    image: temporalio/admin-tools:1.21.4
    stdin_open: true
    tty: true
    depends_on:
      - temporal
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CLI_ADDRESS: temporal:7233

  temporal-ui:
    container_name: temporal-ui
    image: temporalio/ui:2.17.0
    ports:
      - "8080:8080"
    depends_on:
      - temporal
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://localhost:3000

  n8n:
    container_name: n8n
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      N8N_HOST: n8n.127.0.0.1.nip.io
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      NODE_ENV: production
      WEBHOOK_URL: http://n8n.127.0.0.1.nip.io/
      GENERIC_TIMEZONE: America/New_York
    volumes:
      - ./volumes/n8n/.n8n:/home/node/.n8n

  rudder-server:
    container_name: rudder-server
    depends_on:
      - postgresql
      - statsd-exporter
      - rudder-transformer
    image: rudderlabs/rudder-server:latest # latest version that matches 0.*.*
    entrypoint: sh -c '/wait-for db:5432 -- /rudder-server'
    ports:
      - "8082:8080"
    environment:
      JOBS_DB_HOST: postgresql
      JOBS_DB_USER: postgres
      JOBS_DB_PASSWORD: postgres
      JOBS_DB_PORT: 5432
      JOBS_DB_DB_NAME: jobsdb
      DEST_TRANSFORM_URL: http://rudder-transformer:9073
      CONFIG_BACKEND_URL: https://api.rudderstack.com
      WORKSPACE_TOKEN: ${RUDDER_STACK_WORKSPACE_TOKEN}
      STATSD_SERVER_URL: metrics-exporter:9125
      RSERVER_GATEWAY_WEBHOOK_SOURCE_LIST_FOR_PARSING_PARAMS: Shopify
    #      RSERVER_BACKEND_CONFIG_CONFIG_FROM_FILE: true
    #      RSERVER_BACKEND_CONFIG_CONFIG_JSONPATH: <workspace_config_filepath_in_container> # For ex., /etc/rudderstack/workspaceConfig.json
    # Uncomment the following lines to mount workspaceConfig file
    # volumes:
    #   - <absolute_path_to_workspace_config>:<workspace_config_filepath_in_container> # Value for <workspace_config_filepath_in_container> should be same as the value provided for RSERVER_BACKEND_CONFIG_CONFIG_JSONPATH
  rudder-transformer:
    container_name: rudder-transformer
    image: rudderstack/rudder-transformer:latest
    ports:
      - "9073:9090"
    depends_on:
      - statsd-exporter
    environment:
      STATSD_SERVER_HOST: statsd-exporter
      STATSD_SERVER_PORT: 9125

  statsd-exporter:
    container_name: statsd-exporter
    image: prom/statsd-exporter:v0.22.4
    ports:
      - "9102:9102"

  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./services/tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - "8460:8000"
      - "55681:55681"

  wadm:
    image: ghcr.io/wasmcloud/wadm:latest
    environment:
      WADM_NATS_HOST: nats
      WADM_REDIS_HOST: redis

  wasmcloud:
    container_name: wasmcloud-host
    image: wasmcloud/wasmcloud_host:latest
    ports:
      - "4000:4000"
      - "3080-3089:8080-8089" # Allows exposing examples on ports 8080-8089
    environment:
      RUST_LOG: debug,hyper=info
      WASMCLOUD_RPC_HOST: nats
      WASMCLOUD_CTL_HOST: nats
      WASMCLOUD_PROV_RPC_HOST: nats
      OTEL_TRACES_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:55681
