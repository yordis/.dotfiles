version: "3"

services:
  appsmith:
    container_name: appsmith
    image: index.docker.io/appsmith/appsmith-ce
    ports:
      - "5680:80"
      - "56443:443"
    volumes:
      - ./volumes/appsmith/stacks:/appsmith-stacks
    restart: unless-stopped

  browserless:
    container_name: browserless
    image: browserless/chrome:latest
    restart: always
    ports:
      - "3005:3000"
    env_file:
      - ./services/browserless/.env
    volumes:
      - ./volumes/browserless/data:/data

  inngest:
    container_name: inngest
    image: "inngest/inngest:latest"
    command:
      - inngest
      - dev
    ports:
      - "8288:8288"

  nats:
    container_name: nats
    image: nats:latest
    ports:
      - "8222:8222"
      - "4222:4222"
    command: >-
      --http_port 8222
      --port 4222
      --jetstream
      --store_dir /data
    volumes:
      - ./volumes/nats/data:/data

  docker-registry:
    container_name: docker-registry
    image: registry:latest
    restart: unless-stopped
    ports:
      - "5002:5000"

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    restart: unless-stopped
    ports:
      - "9000:8080"
    env_file:
      - ./services/keycloak/.env
    depends_on:
      - mysql

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "9001:3000"
    volumes:
      - ./volumes/grafana/:/var/lib/grafana
    env_file:
      - ./services/grafana/.env

  # rancher:
  #   image: rancher/rancher:latest
  #   restart: unless-stopped
  #   ports:
  #     - 80:80
  #     - 443:443

  minio-console:
    container_name: minio-console
    image: minio/console:latest
    command:
      - server
    ports:
      - "9093:9090"
    env_file:
      - ./services/minio-console/.env

  minio:
    container_name: minio
    image: minio/minio:edge
    command:
      - server
      - /data
    restart: unless-stopped
    ports:
      - "9002:9000"
    volumes:
      - ./volumes/minio/storage:/data
    env_file:
      - ./services/minio/.env

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"

  verdaccio:
    container_name: verdaccio
    image: verdaccio/verdaccio:latest
    restart: unless-stopped
    ports:
      - "4873:4873"
    volumes:
      - ./volumes/verdaccio/storage:/verdaccio/storage
      - ./volumes/verdaccio/plugins:/verdaccio/plugins
    env_file:
      - ./services/verdaccio/.env

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    ports:
      - "2181:2181"
    env_file:
      - ./services/zookeeper/.env

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    env_file:
      - ./services/kafka/.env

  opa:
    container_name: opa
    image: openpolicyagent/opa:latest
    restart: unless-stopped
    ports:
      - "8181:8181"
    command:
      - run
      - --server
      - --log-level=debug

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      - "1026:1025"
      - "8026:8025"

  eventstore:
    container_name: eventstore
    image: eventstore/eventstore:latest
    restart: unless-stopped
    ports:
      - "2113:2113"
      - "1113:1113"
    env_file:
      - ./services/eventstore/.env
    volumes:
      - ./volumes/eventstore/data:/var/lib/eventstore
      - ./volumes/eventstore/log:/var/log/eventstore

  postgis:
    container_name: postgis
    image: mdillon/postgis:latest
    restart: unless-stopped
    ports:
      - "5433:5432"
    env_file:
      - ./services/postgis/.env
    volumes:
      - ./volumes/postgis:/var/lib/postgresql/data

  mysql:
    container_name: mysql
    image: mysql:latest
    restart: unless-stopped
    ports:
      - "3306:3306"
    env_file:
      - ./services/mysql/.env
    volumes:
      - ./volumes/mysql:/var/lib/mysql

  postgresql:
    container_name: postgresql
    image: postgres:latest
    restart: unless-stopped
    ports:
      - "5432:5432"
    env_file:
      - ./services/postgresql/.env
    volumes:
      - ./volumes/postgresql:/var/lib/postgresql/data

  dynamodb-local:
    container_name: dynamodb-local
    image: amazon/dynamodb-local:latest
    restart: unless-stopped
    ports:
      - "8000:8000"

  redis:
    container_name: redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"

  memcached:
    container_name: memcached
    image: memcached:latest
    restart: unless-stopped
    ports:
      - "11211:11211"

  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: unless-stopped
    ports:
      - "27017:27017"

  opensearch:
    container_name: opensearch
    image: opensearchproject/opensearch:latest
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9600:9600"
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
    volumes:
      - ./volumes/opensearch:/usr/share/opensearch/data

  opensearch-dashboards:
    container_name: opensearch-dashboards
    image: opensearchproject/opensearch-dashboards:latest
    ports:
      - "5601:5601"
    expose:
      - "5601"
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]'

  supertokens:
    container_name: supertokens
    image: registry.supertokens.io/supertokens/supertokens-postgresql:latest
    ports:
      - "3567:3567"
    env_file:
      - ./services/supertokens/.env
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  temporal:
    container_name: temporal
    image: temporalio/auto-setup:1.21.4
    ports:
      - "7233:7233"
    depends_on:
      - postgresql
    env_file:
      - ./services/temporal/.env
    volumes:
      - ./volumes/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    labels:
      kompose.volume.type: configMap

  temporal-admin-tools:
    container_name: temporal-admin-tools
    image: temporalio/admin-tools:1.21.4
    depends_on:
      - temporal
    env_file:
      - ./services/temporal-admin-tools/.env
    stdin_open: true
    tty: true

  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    env_file:
      - ./services/temporal-ui/.env
    image: temporalio/ui:2.17.0
    ports:
      - "8080:8080"
